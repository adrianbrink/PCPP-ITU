1.) The tests seem to cover everything, however they should be split up into unit tests.
One test for each function, and them maybe a couple of integration tests to test the
interactions between the methods. In the current state it is shitty to test.

        assert map.remove(9999) == null;
        assert map.remove(117) == null;

        Integer[] keys = {17,34,217};
        String[] values = {"B", "F", "E"};
        map.forEach((k,v) -> {
            assert Arrays.asList(keys).contains(k);
            assert Arrays.asList(values).contains(v);
        });

2.)  To what degree does the test convince you that the StripedWriteMap implementation is correct? In particular, does it tell you anything about the correctness of containsKey?

It doesn't find any defects.

We first tried implementing the tests for putting keys with
if(! map.containsKey(t.key))
{
	map.putIfAbsent(t.key, t.value);	
	t.sum.addAndGet(t.key);
    t.counts[t.id]++;
}

this didn't work since if a thread checks that a key is not present, and then inserts it and incerement sum and count, in reality another thread might have inserted they key in the meantime.

3) doesn't find any defects
4) okay

5) the counts are a bit off, and we are not sure why
6) we could check the foreach, size and get method in parallel

8.2
1.) Removing synchronized leads to errors discovered by the functional tests.
2.) On some runs it matters on others the tests pass. Furthermore, the tests are off by less than in the previous test.
3.) The tests don't discover it.
4.) This has no impact as far as we can tell.
5.) We could write test cases that we expect to fail at all times and see if they pass.
We could configure the tests to run 1000 times instead of just ones. This would help to be more certain that the tests are valid and not just lucky.
Try a wider and smaller keyrange.
Add small errors and see if the tests catch them.
