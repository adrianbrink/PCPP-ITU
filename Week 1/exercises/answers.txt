1.1.1 Something between 10,000,000 and 20,000,000.

1.1.2 Since it always gives the correct result for the count value of 100 I 
would consider it almost correct. However there is a small chance that a result
will not be 200. The likelyhood reduces for interleaving problems and hence the
results appear to be correct.

1.1.3 It will not make a difference. All versions of this code are comprised 
of the same three basic operations: read, update, write.

1.1.4 The value after both threads have completed should be 0. The methods have
to be synchronized for the code to work. Otherwise you have a the lost-update
problem again.

1.1.5 
  i) 52379; -50672; -4412287; -257970
  ii) 11905; 13546; 21344; 21750
  iii) -17798; -21941; -21228; -20232
  iv) 0; 0; 0; 0 
  For decrement the method might read 5 and subtract 1 and then writes 4.
  However in the meantime increment might have executed 100 times and those
  updates would have gotten lost. Furthermore since synchronization slows down
  the method calls it makes it more likely that for every one decrement
  operation there will be multiple increment calls happening in the meantime.


1.2.1
  This scenario depends on the JVM and how it schedules the threads and when the
  GC kicks in. If the threads were executed always within the same intervals 
  the 50 milliseconds prevents an overlap. However when the execution of the
  next thread gets delayed the errors happen.

1.2.2
  Synchronization ensures that only one thread can all the method at any given
  point in time.

1.2.3
  see PrinterTest.java

1.2.4 
  see PrinterTest.java


1.3.1
  Yes it hangs.

1.3.2
  Yes it works.

1.3.3
  The thread doesn't terminate as expected. This is due to the fact that
  synchronized only ensures that subsequent calls to the same method have
  full visibility of the changes. However this guarantee doesn't apply between
  different methods. You shouldn't rely on this.

1.3.4
  Volatile is enough since it enforces that each update to the field is 
  visible to all other threats.


1.4.1
  Sequential: 5.945
  Parallel2: 3.806

1.4.2
  Parallel10: 2.642

1.4.3
  No

1.4.4
  In practice it doesn't matter since get is only called from the main thread.
  Furthermore it is only called after all threads have been joined.


1.5.1
  Random values, already fixed the code before testing this.

1.5.2
  The instance and class methods aren't locking on the same object. The static
  one is locking on TestLocking0.class and the instance one on this.

1.5.3
  see code. Introduce a general locking object and move everything into
  synchronized blocks.


1.6.1
  Make all methods synchronized and add the Guarded keyword to the fields.

1.6.2
  Poorly because it will only allow sequential access to the class.

1.6.3
  No, it wouldn't achieve thread safety since it means that two threads could
  update the same index.
  No, it wouldn't since the updated values would only appear to be visible for
  calls to the same method but not to other method calls.


1.7.1
  Add a locking object to the class and ensure that all calls to update
  totalSize or synchronized on that locking object. Moreover use
  @GuardedBy("locking object") on the field.

1.7.2.
  Same solution as before but with a different locking object.


1.8.1
  Synchronized in a static context locks in the class object. Here there are 2
  different class objects, MysteryA.class and MysteryB.class and hence the
  operations aren't atomic.

1.8.2
  Add a static lock object that is protected and hence shared by the subclass.
